{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('button');\nconst input = document.querySelector('#datetime-picker');\nlet chosenDate;\nstartBtn.disabled = true;\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    chosenDate = selectedDates[0];\n    const nowDate = new Date();\n    if (chosenDate - nowDate <= 0) {\n      startBtn.disabled = true;\n      iziToast.error({\n        titleColor: '#FFFFFF',\n        message: 'Please choose a date in the future',\n        backgroundColor: '#B51B1B',\n        messageColor: '#FAFAFB',\n      });\n      chosenDate = 0;\n    } else {\n      startBtn.disabled = false;\n    }\n  },\n};\n\nflatpickr(input, options);\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nstartBtn.addEventListener('click', handleStartTimer);\n\nconst formatTime = value => (Math.floor(value / 10) == 0 ? '0' + value : value);\n\nfunction handleStartTimer({}) {\n  startBtn.disabled = true;\n  input.disabled = true;\n\n  const values = document.querySelectorAll('.value');\n  const nowDate = new Date();\n  let timeDifference = chosenDate - nowDate;\n  const interval = setInterval(() => {\n    const { days, hours, minutes, seconds } = convertMs(timeDifference);\n    values[0].textContent = formatTime(days);\n    values[1].textContent = formatTime(hours);\n    values[2].textContent = formatTime(minutes);\n    values[3].textContent = formatTime(seconds);\n    timeDifference -= 1000;\n    if (seconds == 0) {\n      clearInterval(interval);\n      input.disabled = false;\n    }\n  }, 1000);\n}\n"],"names":["startBtn","input","chosenDate","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","handleStartTimer","formatTime","value","values","timeDifference","interval"],"mappings":"0IAKA,MAAMA,EAAW,SAAS,cAAc,QAAQ,EAC1CC,EAAQ,SAAS,cAAc,kBAAkB,EACvD,IAAIC,EACJF,EAAS,SAAW,GACpB,MAAMG,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAaE,EAAc,CAAC,EAExBF,EADY,IAAI,MACQ,GAC1BF,EAAS,SAAW,GACpBK,EAAS,MAAM,CACb,WAAY,UACZ,QAAS,qCACT,gBAAiB,UACjB,aAAc,SACtB,CAAO,EACDH,EAAa,GAEbF,EAAS,SAAW,EAEvB,CACH,EAEAM,EAAUL,EAAOE,CAAO,EAExB,SAASI,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEAZ,EAAS,iBAAiB,QAASa,CAAgB,EAEnD,MAAMC,EAAaC,GAAU,KAAK,MAAMA,EAAQ,EAAE,GAAK,EAAI,IAAMA,EAAQA,EAEzE,SAASF,EAAiB,CAAA,EAAI,CAC5Bb,EAAS,SAAW,GACpBC,EAAM,SAAW,GAEjB,MAAMe,EAAS,SAAS,iBAAiB,QAAQ,EAEjD,IAAIC,EAAiBf,EADL,IAAI,KAEpB,MAAMgB,EAAW,YAAY,IAAM,CACjC,KAAM,CAAE,KAAAT,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUU,CAAc,EAClED,EAAO,CAAC,EAAE,YAAcF,EAAWL,CAAI,EACvCO,EAAO,CAAC,EAAE,YAAcF,EAAWJ,CAAK,EACxCM,EAAO,CAAC,EAAE,YAAcF,EAAWH,CAAO,EAC1CK,EAAO,CAAC,EAAE,YAAcF,EAAWF,CAAO,EAC1CK,GAAkB,IACdL,GAAW,IACb,cAAcM,CAAQ,EACtBjB,EAAM,SAAW,GAEpB,EAAE,GAAI,CACT"}